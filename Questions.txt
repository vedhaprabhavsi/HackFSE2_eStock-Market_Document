Spring Boot concepts: Explore Spring Boot concepts in similar lines as below

All annotations used in Spring Boot applications and purpose of each
Different scopes of a Bean
Core Java 8 features(Functional interface, streams, Method reference, date/time, etc…)
@SpringBootApplication, @RestController & @Controller diff, CRUD operations - Http Methods used. Http Headers/Http Status code, @Configuration, @CrossOrigin, @ControllerAdvice,  Spring Core(@Bean, @Component, @ComponentScan, Scope), JPARepository/CrudRepository diff, @Query, MongoTemplate, MongoRepository, etc... @Valid for validations, CommandLineRunner
@value
What is ResponseEntity
Advantages of Microservice architecture
Purpose of Zuul/Spring Cloud Gateway, Eureka Service Registry/Discovery related annotations, configurations
Does Microservices interact with each other, RestTemplate, ResponseEntity

====================================================================

Angular Concepts: Explore Angular Concepts in similar lines as below

Component(View), Service Difference

Data binding – One way binding(interpolation), two way binding( [(ngModel)], event binding

Directives used-ngIf, ngFor, ngClass, ngStyle

Decorators(like annotations in Java) used-@Component, @Injectable, @NgModule, @Input, @Output, @ViewChild, @ViewChildren, etc…

How to display one component in another:

@Input – send data from Parent to Child component,

@Output- send data from Child to Parent component

Component LifeCycle: ngOnInit(), ngOnDestory, ngOnChange( ), ngAfterViewInit( ), etc…

Routing & AuthGuard - CanActivate

How to add Bootstrap or any styling at Component or Application Level

Observable(is used in Service to interact with Rest APIs)

Package.json, angular.json, Angular CLI Commands